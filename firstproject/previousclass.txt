const express = require("express");
const users = require("./MOCK_DATA.json")
const mongo = require('mongoose')
const fs = require("fs");
const { join } = require("path");
const { request } = require("http");
const app = express();

const port = 8000

// middleware - pulgin
app.use(express.urlencoded({ extended: false }))

app.get("/users", (req, res) => {
    const html = `
    <ul>
    ${users?.map((item) => `<li>${item?.first_name}</li>`).join('')}
    </ul>
    `
    res.send(html)
})

// Rest Api's
app.get("/api/users", (req, res) => {
    return res.json(users);
})


app.route("/api/users/:id")
    .get((req, res) => {
        const id = Number(req?.params?.id);
        const user = users?.find((data) => data?.id === id);
        return res.json(user)
    })
    .patch((req, res) => {
        const id = Number(req?.params?.id);
        const userIndex = users?.findIndex((data) => data?.id === id);

        if (userIndex === -1) {
            return res.status(404).json({ message: "User not found" });
        }

        // Update only the provided fields
        const updatedUser = { ...users[userIndex], ...req.body };
        users[userIndex] = updatedUser;

        // Write the updated data to the file
        fs.writeFile("./MOCK_DATA.json", JSON.stringify(users), (err) => {
            if (err) {
                console.error("Error updating user:", err);
                return res.status(500).json({ message: "Error updating user" });
            }

            return res.json({
                message: "User updated successfully",
                user: updatedUser,
            });
        });
    })
    .delete((req, res) => {
        const id = Number(req?.params?.id);
        const userIndex = users?.findIndex((data) => data?.id === id);

        if (userIndex === -1) {
            return res.status(404).json({ message: "User not found" });
        }

        // Remove the user
        const deletedUser = users.splice(userIndex, 1);

        // Write the updated data to the file
        fs.writeFile("./MOCK_DATA.json", JSON.stringify(users), (err) => {
            if (err) {
                console.error("Error deleting user:", err);
                return res.status(500).json({ message: "Error deleting user" });
            }

            return res.json({
                message: "Record deleted successfully",
                user: deletedUser[0],
            });
        });

    })

app.post("/api/users", (req, res) => {
    const body = req.body;
    console.log("i am body from post", body)
    users?.push({
        ...body, id: users?.length + 2
    })
    fs.writeFile("./MOCK_DATA.json", JSON.stringify(users), (err, data) => {
        return res?.json({ message: "record created successsfully", user_id: users?.length })
    })
})


// app.get("/api/users/:id", (req, res) => {
//     const id = Number(req?.params?.id);
//     const user = users?.find((data) => data?.id === id)
//     return res.json(user)
// })




app.listen(port, () => { console.log(`FirstPROJECt app listening on port ${port}`) })
